str(log$mobile.Age)
log$mobile.Age <- as.factor(log$mobile.Age)
#recode Yes = 1 and No = 0
table(log$userfriendly)
#in %
log_table <- log
log_table <- log_table %>%
group_by(mobile.Age) %>% count(mobile.Age)
table(log)
log_table2 <- as.data.frame(table(log))
log_table2
log_table2 <- log_table2[-which(log_table2$userfriendly == ""),]
log_table2
log_table3 <- spread(log_table2, userfriendly, Freq)
log_table3$Total <- log_table3$No + log_table3$Yes
log_table3$P_Yes <- (log_table3$Yes/log_table3$Total)
log_table3$P_No <- (log_table3$No/log_table3$Total)
log_table4 <- log_table3
log_table4$No <- NULL
log_table4$Yes <- NULL
log_table4$Total <- NULL
log_table4 <- melt(log_table4, id.vars = "mobile.Age")
log_table4
ggplot(log_table4, aes(x=mobile.Age, y=value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) + geom_text(aes(label = paste0(round(100*value),"%"),y=labelpos),size = 5) + labs(
title = "Age vs. Usability",
x = "Age",
y = "Usability"
) + theme(text = element_text(size=20))
log_table4$labelpos <- ifelse(log_table4$variable=="P_No",
log_table4$value/2, 1 - log_table4$value/2)
ggplot(log_table4, aes(x=mobile.Age, y=value, fill = variable)) +
geom_bar(position = "fill", stat = "identity",color='black',width=0.9) +
scale_y_continuous(labels = scales::percent) + geom_text(aes(label = paste0(round(100*value),"%"),y=labelpos),size = 5) + labs(
title = "Age vs. Usability",
x = "Age",
y = "Usability"
) + theme(text = element_text(size=20))
source("C:/Users/thanu/Desktop/Nithu/SGKB/Case Study.R")
log_table <- log_table %>%
group_by(mobile.Age) %>% count(mobile.Age)
table(log)
log_table
log_table2 <- as.data.frame(table(log))
log_table2
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
#barchart: Age (Gender)
bar <- data.frame(mobile$Gender, mobile$Age)
head(bar)
summary(mobile)
#remove empty cells
bar1 <- bar[-which(bar$mobile.Age == ""),]
bar1$mobile.Age <- as.factor(bar1$mobile.Age)
head(bar1)
bar1 <- bar1[-which(bar1$mobile.Gender == ""),]
bar1$mobile.Gender <- as.factor(bar1$mobile.Gender)
bar1 <- bar1[-which(bar1$mobile.Gender == 0),]
bar1$Gender <- bar1$mobile.Gender
#stacked barplot: man, woman, both
ggplot(data = bar1, aes(x = mobile.Age, fill = Gender)) + geom_bar(stat = "identity",color='black',width=0.9) + xlab("Age") + ylab("Count") + stat_count(geom = "text", aes(label = stat(count)), colour="white", position = position_stack(vjust = 0.5)) +
labs(
title = "Verteilung Age",
x = "Age",
y = "Count"
) + theme(text = element_text(size=20))
#stacked barplot: man, woman, both
ggplot(data = bar1, aes(x = mobile.Age, fill = Gender)) + geom_bar(position = "fill",stat = "identity",color='black',width=0.9) + xlab("Age") + ylab("Count") + stat_count(geom = "text", aes(label = stat(count)), colour="white", position = position_stack(vjust = 0.5)) +
labs(
title = "Verteilung Age",
x = "Age",
y = "Count"
) + theme(text = element_text(size=20))
#stacked barplot: man, woman, both
ggplot(data = bar1, aes(x = mobile.Age, fill = Gender)) + geom_bar() + xlab("Age") + ylab("Count") + stat_count(geom = "text", aes(label = stat(count)), colour="white", position = position_stack(vjust = 0.5)) +
labs(
title = "Verteilung Age",
x = "Age",
y = "Count"
) + theme(text = element_text(size=20))
#stacked barplot: man, woman, both
ggplot(data = bar1, aes(x = mobile.Age, fill = Gender)) + geom_bar() + xlab("Age") + ylab("Count") + stat_count(geom = "text", aes(label = stat(count)), colour="black", position = position_stack(vjust = 0.5)) +
labs(
title = "Verteilung Age",
x = "Age",
y = "Count"
) + theme(text = element_text(size=20))
source("C:/Users/thanu/Desktop/Nithu/SGKB/Case Study.R")
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
source("C:/Users/thanu/Desktop/Nithu/SGKB/Case Study.R")
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
#########logistic regression Vorbereitung#########
log <- data.frame(mobile$Do.you.find.mobile.application.user.friendly, mobile$How.many.years.you.are.using.mobile.banking.application)
head(log)
#recode NO to No
table(log$mobile.Do.you.find.mobile.application.user.friendly)
log$userfriendly <- log$mobile.Do.you.find.mobile.application.user.friendly
log$userfriendly <- recode_factor(log$userfriendly, "NO"="No")
log$mobile.Do.you.find.mobile.application.user.friendly <- NULL
#remove empty cells
log <- log[-which(log$userfriendly == ""),]
log <- log[-which(log$mobile.How.many.years.you.are.using.mobile.banking.application == ""),]
#recode Yes = 1 and No = 0
log$userfriendly_dummy <- recode_factor(log$userfriendly, "Yes"= 1, "No" = 0)
log$userfriendly_dummy <- as.factor(log$userfriendly_dummy)
#recode years: 0-3 -> 1.5, 0-5 -> 2.5, 3+ -> 3, 4-6 -> 5, 4+ -> 4, 7+ -> 7, Never -> 0
table(log$mobile.How.many.years.you.are.using.mobile.banking.application)
log$years <- log$mobile.How.many.years.you.are.using.mobile.banking.application
str(log$years)
log$years <- recode_factor(log$years, "0-3" = "1.5", "0-5" = "2.5", "4-6" = "5", "Never" = "0")
table(log$years)
log$years <- recode_factor(log$years, "3+" = "3", "4+" = "4", "7+" = "7")
#log$years <- as.numeric(log$years)
head(log)
#log$years <- as.numeric(log$years)
head(log$years)
View(log)
#convert years to numeric values
log$years_num <- as.numeric(levels(log$years))[log$years]
str(log$years_num)
log$years <- NULL
log$mobile.How.many.years.you.are.using.mobile.banking.application <- NULL
log$userfriendly <- NULL
str(log$userfriendly_dummy)
log$userfriendly_dummy <- as.numeric(levels(log$userfriendly_dummy))[log$userfriendly_dummy]
str(log$userfriendly_dummy)
#plot
ggplot(log, aes(years_num, userfriendly_dummy)) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial")) + labs(
title = "Logistic Regression Model: Mobile Banking Usage Years vs. Usability",
x = "Mobile Banking Usage Years",
y = "Usability"
)  + theme(text = element_text(size=20))
#plot
ggplot(log, aes(years_num, userfriendly_dummy)) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial")) + labs(
title = "Simple Binary Logistic Regression: Mobile Banking Usage Years vs. Usability",
x = "Mobile Banking Usage Years",
y = "Usability"
)  + theme(text = element_text(size=20))
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
#########logistic regression mit Gender Vorbereitung#########
log <- data.frame(mobile$Do.you.find.mobile.application.user.friendly, mobile$How.many.years.you.are.using.mobile.banking.application, mobile$Gender)
head(log)
#recode NO to No
table(log$mobile.Do.you.find.mobile.application.user.friendly)
log$userfriendly <- log$mobile.Do.you.find.mobile.application.user.friendly
log$userfriendly <- recode_factor(log$userfriendly, "NO"="No")
log$mobile.Do.you.find.mobile.application.user.friendly <- NULL
#remove empty cells
log$userfriendly <- recode_factor(log$userfriendly, "0" = "")
log <- log[-which(log$userfriendly == ""),]
log <- log[-which(log$mobile.How.many.years.you.are.using.mobile.banking.application == ""),]
#recode Yes = 1 and No = 0
log$userfriendly_dummy <- recode_factor(log$userfriendly, "Yes"= 1, "No" = 0)
log$userfriendly_dummy <- as.factor(log$userfriendly_dummy)
#recode Man = 0, Woman = 1
log$mobile.Gender <- recode_factor(log$mobile.Gender, "0" = "")
table(log$mobile.Gender)
log <- log[-which(log$mobile.Gender == ""),]
log$Gender <- recode_factor(log$mobile.Gender, "Woman"= 1, "Man" = 0)
log$mobile.Gender <- NULL
#recode years: 0-3 -> 1.5, 0-5 -> 2.5, 3+ -> 3, 4-6 -> 5, 4+ -> 4, 7+ -> 7, Never -> 0
table(log$mobile.How.many.years.you.are.using.mobile.banking.application)
log$years <- log$mobile.How.many.years.you.are.using.mobile.banking.application
str(log$years)
log$years <- recode_factor(log$years, "0-3" = "1.5", "0-5" = "2.5", "4-6" = "5", "Never" = "0")
table(log$years)
log$years <- recode_factor(log$years, "3+" = "3", "4+" = "4", "7+" = "7")
#log$years <- as.numeric(log$years)
head(log)
#convert years to numeric values
log$years_num <- as.numeric(levels(log$years))[log$years]
str(log$years_num)
log$years <- NULL
log$mobile.How.many.years.you.are.using.mobile.banking.application <- NULL
log$userfriendly <- NULL
str(log$userfriendly_dummy)
log$userfriendly_dummy <- as.numeric(levels(log$userfriendly_dummy))[log$userfriendly_dummy]
#plot
ggplot(log, aes(years_num, userfriendly_dummy, color = as.factor(Gender))) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(title = "Simple Binary Logistic Regression (0 = Man, 1 = Woman)", x = "Mobile Banking Usage Years",y = "Usability")
#plot
ggplot(log, aes(years_num, userfriendly_dummy, color = as.factor(Gender))) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(title = "Simple Binary Logistic Regression (0 = Man, 1 = Woman)", x = "Mobile Banking Usage Years",y = "Usability") + theme(text = element_text(size=20))
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
#########logistic regression Vorbereitung#########
log <- data.frame(mobile$Do.you.find.mobile.application.user.friendly, mobile$How.many.years.you.are.using.mobile.banking.application)
head(log)
#recode NO to No
table(log$mobile.Do.you.find.mobile.application.user.friendly)
log$userfriendly <- log$mobile.Do.you.find.mobile.application.user.friendly
log$userfriendly <- recode_factor(log$userfriendly, "NO"="No")
log$mobile.Do.you.find.mobile.application.user.friendly <- NULL
#remove empty cells
log <- log[-which(log$userfriendly == ""),]
log <- log[-which(log$mobile.How.many.years.you.are.using.mobile.banking.application == ""),]
#recode Yes = 1 and No = 0
log$userfriendly_dummy <- recode_factor(log$userfriendly, "Yes"= 1, "No" = 0)
log$userfriendly_dummy <- as.factor(log$userfriendly_dummy)
#recode years: 0-3 -> 1.5, 0-5 -> 2.5, 3+ -> 3, 4-6 -> 5, 4+ -> 4, 7+ -> 7, Never -> 0
table(log$mobile.How.many.years.you.are.using.mobile.banking.application)
log$years <- log$mobile.How.many.years.you.are.using.mobile.banking.application
str(log$years)
log$years <- recode_factor(log$years, "0-3" = "1.5", "0-5" = "2.5", "4-6" = "5", "Never" = "0")
table(log$years)
log$years <- recode_factor(log$years, "3+" = "3", "4+" = "4", "7+" = "7")
#log$years <- as.numeric(log$years)
head(log$years)
#convert years to numeric values
log$years_num <- as.numeric(levels(log$years))[log$years]
str(log$years_num)
log$years <- NULL
log$mobile.How.many.years.you.are.using.mobile.banking.application <- NULL
log$userfriendly <- NULL
str(log$userfriendly_dummy)
log$userfriendly_dummy <- as.numeric(levels(log$userfriendly_dummy))[log$userfriendly_dummy]
#plot
ggplot(log, aes(years_num, userfriendly_dummy)) + geom_point() + geom_smooth(method = "glm", method.args = list(family = "binomial")) + labs(
title = "Simple Binary Logistic Regression",
x = "Mobile Banking Usage Years",
y = "Usability"
)  + theme(text = element_text(size=20))
mobile <- read.csv("C:/Users/thanu/Desktop/Nithu/SGKB/mobile_banking_casestudy.csv", sep=";")
log <- data.frame(mobile$Do.you.find.mobile.application.user.friendly, mobile$Age)
head(log)
#recode NO to No
table(log$mobile.Age)
log$userfriendly <- log$mobile.Do.you.find.mobile.application.user.friendly
log$userfriendly <- recode_factor(log$userfriendly, "NO"="No")
log$mobile.Do.you.find.mobile.application.user.friendly <- NULL
#remove empty cells
log <- log[-which(log$userfriendly == ""),]
log <- log[-which(log$mobile.Age == ""),]
str(log$mobile.Age)
log$mobile.Age <- as.factor(log$mobile.Age)
#recode Yes = 1 and No = 0
table(log$userfriendly)
#log$userfriendly_dummy <- recode_factor(log$userfriendly, "Yes"= 1, "No" = 0)
#table(log$userfriendly_dummy)
#in %
log_table <- log
log_table <- log_table %>%
group_by(mobile.Age) %>% count(mobile.Age)
table(log)
#log$userfriendly <- NULL
log_table2 <- as.data.frame(table(log))
log_table2 <- log_table2[-which(log_table2$userfriendly == ""),]
log_table3 <- spread(log_table2, userfriendly, Freq)
log_table3$Total <- log_table3$No + log_table3$Yes
log_table3$P_Yes <- (log_table3$Yes/log_table3$Total)
log_table3$P_No <- (log_table3$No/log_table3$Total)
log_table4 <- log_table3
log_table4
View(log_table4)
setwd("C:/Users/thanu/Desktop/Nithu/VBZ/Final")
frequenzen_2020 <- read.csv("frequenzen_hardbruecke_2020.csv")
View(frequenzen_2020)
frequenzen_2021 <- read.csv("frequenzen_hardbruecke_2021.csv")
View(frequenzen_2021)
#Daten vorbereiten: ü richtig formatieren
frequenzen_2020$Name <- recode_factor(frequenzen_2020$Name, "Ost-SÃ¼d total"="Ost-Süd total", "West-SÃ¼d total"="West-Süd total")
levels(frequenzen_2020$Name)
frequenzen_2021$Name <- recode_factor(frequenzen_2021$Name, "Ost-SÃ¼d total"="Ost-Süd total", "West-SÃ¼d total"="West-Süd total")
levels(frequenzen_2021$Name)
#Daten vorbereiten: total raus
frequenzen_2020$Name <- recode_factor(frequenzen_2020$Name, "Ost-Süd total"="Ost-Süd", "West-Süd total"="West-Süd", "Ost-Nord total"="Ost-Nord", "Ost-SBB total" = "Ost-SBB", "Ost-VBZ Total" = "Ost-VBZ", "West-Nord total" = "West-Nord", "West-SBB total" = "West-SBB", "West-VBZ total" = "West-VBZ")
levels(frequenzen_2020$Name)
frequenzen_2021$Name <- recode_factor(frequenzen_2021$Name, "Ost-Süd total"="Ost-Süd", "West-Süd total"="West-Süd", "Ost-Nord total"="Ost-Nord", "Ost-SBB total" = "Ost-SBB", "Ost-VBZ Total" = "Ost-VBZ", "West-Nord total" = "West-Nord", "West-SBB total" = "West-SBB", "West-VBZ total" = "West-VBZ")
levels(frequenzen_2021$Name)
#Spalte Timestamp trennen
frequenzen_2020$Timestamp <- colsplit(frequenzen_2020$Timestamp, "T", c("Date", "Time"))
head(frequenzen_2020)
frequenzen_2020 <- cbind(frequenzen_2020, frequenzen_2020$Timestamp)
frequenzen_2020$Timestamp <- NULL
frequenzen_2021$Timestamp <- colsplit(frequenzen_2021$Timestamp, "T", c("Date", "Time"))
head(frequenzen_2021)
frequenzen_2021 <- cbind(frequenzen_2021, frequenzen_2021$Timestamp)
frequenzen_2021$Timestamp <- NULL
########## Transformation für Grafik Aktivitäten ##########
#Transformation: Aktivität = In + Out
aktivitäten_2020 <- frequenzen_2020
aktivitäten_2021 <- frequenzen_2021
aktivitäten_2020$Aktivität <- aktivitäten_2020$In + aktivitäten_2020$Out
head(aktivitäten_2020)
aktivitäten_2021$Aktivität <- aktivitäten_2021$In + aktivitäten_2021$Out
head(aktivitäten_2021)
#Summe der Aktivität pro Tag, gruppiere per Zähllinie
aktivitäten_2020_sum <- aktivitäten_2020 %>% group_by(aktivitäten_2020$Name, aktivitäten_2020$Date) %>% summarise(sum = sum(Aktivität))
head(aktivitäten_2020_sum)
aktivitäten_2021_sum <- aktivitäten_2021 %>% group_by(aktivitäten_2021$Name, aktivitäten_2021$Date) %>% summarise(sum = sum(Aktivität))
head(aktivitäten_2021_sum)
aktivitäten_2020_sum$Name <- aktivitäten_2020_sum$`aktivitäten_2020$Name`
aktivitäten_2020_sum$`aktivitäten_2020$Name` <- NULL
aktivitäten_2020_sum$Date <- aktivitäten_2020_sum$`aktivitäten_2020$Date`
aktivitäten_2020_sum$`aktivitäten_2020$Date` <- NULL
aktivitäten_2021_sum$Name <- aktivitäten_2021_sum$`aktivitäten_2021$Name`
aktivitäten_2021_sum$`aktivitäten_2021$Name` <- NULL
aktivitäten_2021_sum$Date <- aktivitäten_2021_sum$`aktivitäten_2021$Date`
aktivitäten_2021_sum$`aktivitäten_2021$Date` <- NULL
#Datum transformieren
aktivitäten_2020_sum$Date <- ymd(aktivitäten_2020_sum$Date)
str(aktivitäten_2020_sum$Date)
aktivitäten_2021_sum$Date <- ymd(aktivitäten_2021_sum$Date)
head(aktivitäten_2021_sum)
#Jahr extrahieren
aktivitäten_2020_sum$Year <- year(aktivitäten_2020_sum$Date)
aktivitäten_2021_sum$Year <- year(aktivitäten_2021_sum$Date)
#beide Datensätze vereinen
aktivitäten <- rbind(aktivitäten_2020_sum, aktivitäten_2021_sum)
head(aktivitäten)
#Jahr überall auf 2020 setzen, damit auf x-Achse nur Daten abgebildet sind ohne Jahre
year(aktivitäten$Date) <- 2020
aktivitäten$Jahr <- aktivitäten$Year
aktivitäten$Year <- NULL
View(aktivitäten)
aktivitäten <- read.csv("aktivitäten.csv")
frequenzen_2020 <- read.csv("frequenzen_hardbruecke_2020.csv")
frequenzen_2021 <- read.csv("frequenzen_hardbruecke_2021.csv")
#Daten vorbereiten: ü richtig formatieren
frequenzen_2020$Name <- recode_factor(frequenzen_2020$Name, "Ost-SÃ¼d total"="Ost-Süd total", "West-SÃ¼d total"="West-Süd total")
levels(frequenzen_2020$Name)
frequenzen_2021$Name <- recode_factor(frequenzen_2021$Name, "Ost-SÃ¼d total"="Ost-Süd total", "West-SÃ¼d total"="West-Süd total")
levels(frequenzen_2021$Name)
#Daten vorbereiten: total raus
frequenzen_2020$Name <- recode_factor(frequenzen_2020$Name, "Ost-Süd total"="Ost-Süd", "West-Süd total"="West-Süd", "Ost-Nord total"="Ost-Nord", "Ost-SBB total" = "Ost-SBB", "Ost-VBZ Total" = "Ost-VBZ", "West-Nord total" = "West-Nord", "West-SBB total" = "West-SBB", "West-VBZ total" = "West-VBZ")
levels(frequenzen_2020$Name)
frequenzen_2021$Name <- recode_factor(frequenzen_2021$Name, "Ost-Süd total"="Ost-Süd", "West-Süd total"="West-Süd", "Ost-Nord total"="Ost-Nord", "Ost-SBB total" = "Ost-SBB", "Ost-VBZ Total" = "Ost-VBZ", "West-Nord total" = "West-Nord", "West-SBB total" = "West-SBB", "West-VBZ total" = "West-VBZ")
levels(frequenzen_2021$Name)
#Spalte Timestamp trennen
frequenzen_2020$Timestamp <- colsplit(frequenzen_2020$Timestamp, "T", c("Date", "Time"))
head(frequenzen_2020)
frequenzen_2020 <- cbind(frequenzen_2020, frequenzen_2020$Timestamp)
frequenzen_2020$Timestamp <- NULL
frequenzen_2021$Timestamp <- colsplit(frequenzen_2021$Timestamp, "T", c("Date", "Time"))
head(frequenzen_2021)
frequenzen_2021 <- cbind(frequenzen_2021, frequenzen_2021$Timestamp)
frequenzen_2021$Timestamp <- NULL
In_Out_2020 <- frequenzen_2020
In_Out_2021 <- frequenzen_2021
#Datum transformieren
In_Out_2020$Date <- ymd(In_Out_2020$Date)
str(In_Out_2020$Date)
In_Out_2021$Date <- ymd(In_Out_2021$Date)
head(In_Out_2021)
#beide Datensätze vereinen
In_Out <- rbind(In_Out_2020, In_Out_2021)
head(In_Out)
#Time als Nummer formatieren
In_Out$Time_num <- as.character(In_Out$Time)
In_Out$Time_num <- gsub(":",".",In_Out$Time_num)
head(In_Out)
In_Out$Time_num <- substr(In_Out$Time_num,1,5)
In_Out$Time_num <- as.numeric(In_Out$Time_num)
str(In_Out$Time_num)
head(In_Out)
In_Out$Time <- NULL
#In und Out in eine Kolonne transformieren
In_Out_reshape <- melt(In_Out, id=c("Name", "Date", "Time_num"))
head(In_Out_reshape)
In_Out_reshape <- read.csv("In_Out_reshape.csv")
source("C:/Users/thanu/Desktop/Nithu/SGKB/Case Study.R")
runApp('Aktivitäten')
setwd("C:/Users/thanu/Desktop/Nithu/VBZ/Final/Aktivitäten")
runApp()
aktivitäten <- read.csv("aktivitäten.csv")
ui = fluidPage(
titlePanel("Gesamtaktivitäten pro Tag"),
selectInput(inputId = "Zähllinie",
label = "Wähle Zähllinie:",
choices = c("Ost-Süd", "West-Süd", "Ost-Nord", "Ost-SBB", "Ost-VBZ", "West-Nord", "West-SBB", "West-VBZ"),
selected = "Ost-Süd",
multiple = TRUE
),
plotOutput("plot"), width = 40,
textOutput("text")
)
server = function(input, output) {
selected <- reactive({
aktivitäten[aktivitäten$Name == input$Zähllinie,]
})
output$plot <- renderPlot({
ggplot(selected(), aes(x= Date , y=sum, group = Jahr, colour = factor(Jahr))) +
geom_line() + theme(axis.line = element_line(), text = element_text(size = 15), panel.background = element_rect(fill = "white"), axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) + scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs (x = "Monat", y = "Zähllinie")
}, width = "auto", height = "auto")
output$text <- renderText({"Erklärung: In dieser Grafik wird die Aktivität an den Zähllinien der VBZ Haltestelle Bahnhof Hardbrücke dargestellt. Dabei wird die Aktivität als die Summe der Variablen 'In' & 'Out' definiert. Durch die Wahl der Zähllinie im Feld wird der Vergleich der Gesamtaktivitäten (pro Tag) in den Jahren 2020 und 2021 (bis Mitte Juni) an dieser Zähllinie angestossen. Besonders auffällig ist der Fall der Aktivitäten an allen Zähllinien im März 2020, vermutlich verursacht durch die Erklärung der ausserordentlichen Lage durch den Bundesrat und den daher eingehenden Massnahmen."})
}
shinyApp(ui = ui, server)
aktivitäten <- read.csv("aktivitäten.csv")
ui = fluidPage(
titlePanel("Gesamtaktivitäten pro Tag"),
selectInput(inputId = "Zähllinie",
label = "Wähle Zähllinie:",
choices = c("Ost-Süd", "West-Süd", "Ost-Nord", "Ost-SBB", "Ost-VBZ", "West-Nord", "West-SBB", "West-VBZ"),
selected = "Ost-Süd",
multiple = TRUE
),
plotOutput("plot"), width = 40,
textOutput("text")
)
server = function(input, output) {
selected <- reactive({
aktivitäten[aktivitäten$Name == input$Zähllinie,]
})
output$plot <- renderPlot({
ggplot(selected(), aes(x= Date , y=sum, group = Jahr, colour = factor(Jahr))) +
geom_line() + theme(axis.line = element_line(), text = element_text(size = 15), panel.background = element_rect(fill = "white"), axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) + scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs (x = "Monat", y = "Zähllinie")
}, width = "auto", height = "auto")
output$text <- renderText({"Erklärung: In dieser Grafik wird die Aktivität an den Zähllinien der VBZ Haltestelle Bahnhof Hardbrücke dargestellt. Dabei wird die Aktivität als die Summe der Variablen 'In' & 'Out' definiert. Durch die Wahl der Zähllinie im Feld wird der Vergleich der Gesamtaktivitäten (pro Tag) in den Jahren 2020 und 2021 (bis Mitte Juni) an dieser Zähllinie angestossen. Besonders auffällig ist der Fall der Aktivitäten an allen Zähllinien im März 2020, vermutlich verursacht durch die Erklärung der ausserordentlichen Lage durch den Bundesrat und den daher eingehenden Massnahmen."})
}
shinyApp(ui = ui, server)
str(aktivitäten)
View(aktivitäten)
aktivitäten$Date <- as.Date(aktivitäten$Date)
ui = fluidPage(
titlePanel("Gesamtaktivitäten pro Tag"),
selectInput(inputId = "Zähllinie",
label = "Wähle Zähllinie:",
choices = c("Ost-Süd", "West-Süd", "Ost-Nord", "Ost-SBB", "Ost-VBZ", "West-Nord", "West-SBB", "West-VBZ"),
selected = "Ost-Süd",
multiple = TRUE
),
plotOutput("plot"), width = 40,
textOutput("text")
)
server = function(input, output) {
selected <- reactive({
aktivitäten[aktivitäten$Name == input$Zähllinie,]
})
output$plot <- renderPlot({
ggplot(selected(), aes(x= Date , y=sum, group = Jahr, colour = factor(Jahr))) +
geom_line() + theme(axis.line = element_line(), text = element_text(size = 15), panel.background = element_rect(fill = "white"), axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) + scale_x_date(date_breaks = "1 month", date_labels = "%b") +
labs (x = "Monat", y = "Zähllinie")
}, width = "auto", height = "auto")
output$text <- renderText({"Erklärung: In dieser Grafik wird die Aktivität an den Zähllinien der VBZ Haltestelle Bahnhof Hardbrücke dargestellt. Dabei wird die Aktivität als die Summe der Variablen 'In' & 'Out' definiert. Durch die Wahl der Zähllinie im Feld wird der Vergleich der Gesamtaktivitäten (pro Tag) in den Jahren 2020 und 2021 (bis Mitte Juni) an dieser Zähllinie angestossen. Besonders auffällig ist der Fall der Aktivitäten an allen Zähllinien im März 2020, vermutlich verursacht durch die Erklärung der ausserordentlichen Lage durch den Bundesrat und den daher eingehenden Massnahmen."})
}
shinyApp(ui = ui, server)
#bitte zuerst ausführen
aktivitäten <- read.csv("aktivitäten.csv")
aktivitäten$Date <- as.Date(aktivitäten$Date)
runApp()
#bitte zuerst ausführen
In_Out_reshape <- read.csv("In_Out_reshape.csv")
setwd("C:/Users/thanu/Desktop/Nithu/VBZ/Final/In vs. Out")
#bitte zuerst ausführen
In_Out_reshape <- read.csv("In_Out_reshape.csv")
ui = fluidPage(
titlePanel("Flaschenhals identifizieren: In vs. Out"),
selectInput(inputId = "Zähllinie",
label = "Wähle Zähllinie:",
choices = c("Ost-Süd", "West-Süd", "Ost-Nord", "Ost-SBB", "Ost-VBZ", "West-Nord", "West-SBB", "West-VBZ"),
selected = "Ost-Süd",
multiple = TRUE
),
dateInput(inputId = "Datum",
label = "Wähle Datum (vor 16.06.21):",
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
language = "de"),
plotOutput("plot"), width = 40,
textOutput("text"))
server = function(input, output) {
selected <- reactive({
In_Out_reshape <- In_Out_reshape[In_Out_reshape$Name == input$Zähllinie,]
In_Out_reshape <- In_Out_reshape[In_Out_reshape$Date == input$Datum,]
})
output$plot <- renderPlot({
ggplot(selected()) + geom_line(aes(x = Time_num, y = value, colour = variable)) + scale_fill_discrete(labels = c("In", "Out")) + scale_x_continuous(breaks = seq(0,24,by=2)) + theme(axis.line = element_line(), text = element_text(size = 15), panel.background = element_rect(fill = "white"), axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) + labs (x = "Uhrzeit", y = "In vs. Out")
})
output$text <- renderText({"Erklärung: In dieser Grafik wird der Vergleich der Variablen 'In' & 'Out' für die Zähllinien der VBZ Haltestelle Bahnhof Hardbrücke an einem bestimmten Tag dargestellt. Besonders zu Stosszeiten an Wochentagen ist ersichtlich, dass der In-Flow höher als der Out-Flow ist und somit ein Flaschenhals entstehen kann."})
}
shinyApp(ui = ui, server)
#bitte zuerst ausführen
library(readxl)
library(reshape2)
library(dplyr)
library(shiny)
library(ggplot2)
library(lubridate)
In_Out_reshape <- read.csv("In_Out_reshape.csv")
ui = fluidPage(
titlePanel("Flaschenhals identifizieren: In vs. Out"),
selectInput(inputId = "Zähllinie",
label = "Wähle Zähllinie:",
choices = c("Ost-Süd", "West-Süd", "Ost-Nord", "Ost-SBB", "Ost-VBZ", "West-Nord", "West-SBB", "West-VBZ"),
selected = "Ost-Süd",
multiple = TRUE
),
dateInput(inputId = "Datum",
label = "Wähle Datum (vor 16.06.21):",
format = "yyyy-mm-dd",
startview = "month",
weekstart = 0,
language = "de"),
plotOutput("plot"), width = 40,
textOutput("text"))
server = function(input, output) {
selected <- reactive({
In_Out_reshape <- In_Out_reshape[In_Out_reshape$Name == input$Zähllinie,]
In_Out_reshape <- In_Out_reshape[In_Out_reshape$Date == input$Datum,]
})
output$plot <- renderPlot({
ggplot(selected()) + geom_line(aes(x = Time_num, y = value, colour = variable)) + scale_fill_discrete(labels = c("In", "Out")) + scale_x_continuous(breaks = seq(0,24,by=2)) + theme(axis.line = element_line(), text = element_text(size = 15), panel.background = element_rect(fill = "white"), axis.title.x = element_text(size = 15), axis.title.y = element_text(size = 15)) + labs (x = "Uhrzeit", y = "In vs. Out")
})
output$text <- renderText({"Erklärung: In dieser Grafik wird der Vergleich der Variablen 'In' & 'Out' für die Zähllinien der VBZ Haltestelle Bahnhof Hardbrücke an einem bestimmten Tag dargestellt. Besonders zu Stosszeiten an Wochentagen ist ersichtlich, dass der In-Flow höher als der Out-Flow ist und somit ein Flaschenhals entstehen kann."})
}
shinyApp(ui = ui, server)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
